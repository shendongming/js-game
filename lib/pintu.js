// Generated by CoffeeScript 1.6.2
/*

拼图游戏
*/


(function() {
  var $, DIRECT_DOWN, DIRECT_LEFT, DIRECT_RIGHT, DIRECT_UP, copy_array, debug_data, die, equal_array, len_point, log, map2arr, random, __top;

  $ = this.jQuery;

  log = function(msg, tag) {
    if (tag == null) {
      tag = '';
    }
    return console.log(tag + ' ' + JSON.stringify(msg));
  };

  if (!this['console']) {
    this['console'] = {
      log: function(msg) {
        return msg;
      }
    };
  }

  DIRECT_UP = 'up';

  DIRECT_DOWN = 'down';

  DIRECT_RIGHT = 'right';

  DIRECT_LEFT = 'left';

  map2arr = function(arr) {
    var t, y, _i, _len;

    t = [];
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      y = arr[_i];
      t = t.concat(y);
    }
    return t;
  };

  die = function() {
    throw new Error('die');
  };

  this.PintuView = (function() {
    function PintuView(div, size) {
      var i, id, j, k, obj, s, w, _fn, _i, _j, _k, _l, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results, _results1,
        _this = this;

      this.div = div;
      this.size = size != null ? size : 3;
      if (this.size < 3) {
        throw new Error('size Error:' + this.size);
      }
      this.id = 'game_' + Math.random().toString().substring(2, 12);
      id = this.id;
      this.data = (function() {
        _results = [];
        for (var _i = 0, _ref = this.size * this.size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      this.win_data = (function() {
        _results1 = [];
        for (var _j = 1, _ref1 = this.size * this.size - 1; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; 1 <= _ref1 ? _j++ : _j--){ _results1.push(_j); }
        return _results1;
      }).apply(this).concat([0]);
      log(this.win_data, 'win');
      this.div.css('position', 'relative');
      w = this.div.height() / this.size;
      s = ['<table width=100%><tr><td width=220>'];
      s.push('<table id="' + id + '_table"  width=100%  cellpadding="0" cellspacing="1" style="background-color:#c0c0c0;table-layout:fixed">');
      for (i = _k = 0, _ref2 = this.size - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        s.push('<tr>');
        for (j = _l = 0, _ref3 = this.size - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {
          k = i * this.size + j;
          s.push('<td id="' + this.id + '_td_' + k + '"   align=center valign=center onselect="return false"  onselectstart="return false" onmouseover="this.style.backgroundColor=\'#ccc\'" onmouseout="this.style.backgroundColor=\'#fff\'"  style="background-color:#fff;font-size:28px;width:' + w + 'px;height:' + w + 'px ">' + k + '</td>');
        }
      }
      s.push('</table>');
      s.push('</td><td valign=top>');
      s.push('<table width=100%><tr><td colspan=2>拼图游戏</td></tr>');
      s.push('<tr style="display:none"><td  width=70>步数</td><td id="' + id + '_step">1</td></tr>');
      s.push('<tr style="display:none"><td >时间</td><td  id="' + id + '_time">1</td></tr>');
      s.push('<tr style="display:none"><td >状态</td><td  id="' + id + '_my_statues">游戏未开始</td></tr>');
      s.push('<tr><td colspan=2><input id="' + id + '_my_but" type=button value="开始" >&nbsp;<input id="' + id + '_my_but_ai" type=button value="自动" >&nbsp;</td></tr></table>');
      s.push('<div  id="' + id + '_msg"  style="position:absolute;width:100px;height:30px;display:none;background-color:#ffffff;border:1px solid green"></div>');
      this.div.html(s.join(''));
      $('#' + this.id + '_msg').css({
        'left': ((this.div.width() - 100) / 2) + 'px',
        'top': ((this.div.height() - 30) / 2) + 'px'
      });
      for (i = _m = 0, _ref4 = this.size - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; i = 0 <= _ref4 ? ++_m : --_m) {
        s.push('<tr>');
        _fn = function(obj, i, j) {
          return obj.click(function(e) {
            return _this.move([j, i]);
          });
        };
        for (j = _n = 0, _ref5 = this.size - 1; 0 <= _ref5 ? _n <= _ref5 : _n >= _ref5; j = 0 <= _ref5 ? ++_n : --_n) {
          k = i * this.size + j;
          obj = $('#' + this.id + '_td_' + k);
          _fn(obj, i, j);
        }
      }
      $('#' + this.id + '_my_but').click(function() {
        return _this.start();
      });
      $('#' + this.id + '_my_but_ai').click(function() {
        return _this.start_ai();
      });
      this.start();
    }

    PintuView.prototype.start = function() {
      var _this = this;

      log('start');
      $('#' + this.id + '_msg').html('游戏重新开始').show();
      this.random();
      this.update();
      return setTimeout(function() {
        return $('#' + _this.id + '_msg').hide();
      }, 1000);
    };

    PintuView.prototype.start_ai = function() {
      var e, path, work,
        _this = this;

      if (__top['Worker']) {
        try {
          work = new Worker('lib/work.js');
          work.postMessage(this.data);
          worker.onmessage(function(path) {
            return _this.demo(path);
          });
          return;
        } catch (_error) {
          e = _error;
          e;
        }
      }
      path = get_path(this.data);
      log(path, 'path');
      return this.demo(path);
    };

    PintuView.prototype.demo = function(path) {
      var find_0, t,
        _this = this;

      log(path, 'ok result');
      if (!path) {
        return;
      }
      find_0 = function(data) {
        var x, y, _i, _j, _ref, _ref1;

        log(data, 'find p0');
        for (y = _i = 0, _ref = data.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
          for (x = _j = 0, _ref1 = data.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            log([data[y][x], x, y], 'find');
            if (data[y][x] === 0) {
              return [x, y];
            }
          }
        }
      };
      return t = setInterval(function() {
        var direct, p0;

        if (path[1].length === 0) {
          clearInterval(t);
          return;
        }
        direct = path[1].splice(0, 1)[0];
        p0 = find_0(_this.data);
        log(p0, 'p0');
        if (direct === DIRECT_UP) {
          p0[1]--;
        }
        if (direct === DIRECT_DOWN) {
          p0[1]++;
        }
        if (direct === DIRECT_LEFT) {
          p0[0]--;
        }
        if (direct === DIRECT_RIGHT) {
          p0[0]++;
        }
        return _this.move(p0);
      }, 200);
    };

    PintuView.prototype.update = function() {
      var i, s, td, x, y, _i, _ref, _results;

      log('update ');
      _results = [];
      for (y = _i = 0, _ref = this.size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;

          _results1 = [];
          for (x = _j = 0, _ref1 = this.size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            i = y * this.size + x;
            td = $('#' + this.id + '_td_' + i);
            if (this.data[y][x] === 0) {
              s = '&nbsp;';
            } else {
              s = this.data[y][x];
            }
            _results1.push(td.html(s));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    PintuView.prototype.random = function() {
      return this.data = random(this.size);
    };

    PintuView.prototype.move = function(k) {
      var len, x, y;

      log(k, 'move');
      log(this.data, 'move');
      len = this.size * this.size;
      x = k[0], y = k[1];
      log([x, y]);
      if (x > 0 && this.data[y][x - 1] === 0) {
        this.step++;
        return this.swap_td(k, [x - 1, y]);
      }
      if (y > 0 && this.data[y - 1][x] === 0) {
        this.step++;
        return this.swap_td(k, [x, y - 1]);
      }
      if (x < this.size - 1 && this.data[y][x + 1] === 0) {
        this.step++;
        return this.swap_td(k, [x + 1, y]);
      }
      if (y < this.size - 1 && this.data[y + 1][x] === 0) {
        this.step++;
        return this.swap_td(k, [x, y + 1]);
      }
    };

    PintuView.prototype.is_win = function() {
      var win;

      win = 0;
      log(this.win_data, 'win_data');
      log(this.data, 'data');
      if (map2arr(this.data).join('') === this.win_data.join('')) {
        win = 1;
      }
      log('win', win);
      if (win) {
        $('#' + this.id + '_msg').html('win!').show();
      }
      return win;
    };

    PintuView.prototype.swap_td = function(m, n) {
      var e, t;

      log('swap_td', this.data);
      t = this.data[m[1]][m[0]];
      this.data[m[1]][m[0]] = this.data[n[1]][n[0]];
      this.data[n[1]][n[0]] = t;
      if (this.is_win()) {
        this.my_statues = 2;
        try {
          window.clearInterval(this.time_p);
        } catch (_error) {
          e = _error;
          '';
        }
      }
      return this.update();
    };

    PintuView.prototype.td_click = function(td) {
      console.log(td);
      return log($(td).id, 'td');
    };

    PintuView.prototype.run = function() {
      var _this = this;

      return $(window).keydown(function(e) {
        var direct;

        if (e.keyCode === 37) {
          direct = DIRECT_LEFT;
          _this.keys.push(direct);
          return false;
        }
        if (e.keyCode === 39) {
          direct = DIRECT_RIGHT;
          _this.keys.push(direct);
          return false;
        }
        if (e.keyCode === 38) {
          direct = DIRECT_UP;
          _this.keys.push(direct);
          return false;
        }
        if (e.keyCode === 40) {
          direct = DIRECT_DOWN;
          _this.keys.push(direct);
          return false;
        }
        if (e.keyCode === 32) {
          if (_this.t > 0) {
            window.clearInterval(_this.t);
            return _this.t = 0;
          } else {
            return _this.t = window.setInterval(function() {
              return _this.tick();
            }, _this.tick_time);
          }
        }
      });
    };

    return PintuView;

  })();

  __top = this;

  log = function(msg, flag) {
    if (flag == null) {
      flag = '';
    }
    return console.log(flag + JSON.stringify(msg));
  };

  copy_array = function(arr) {
    var t, x, _i, _len;

    t = [];
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      x = arr[_i];
      t.push(x.slice(0));
    }
    return t;
  };

  equal_array = function(arr1, arr2) {
    var i, _i, _ref;

    if (arr1.length !== arr2.length) {
      return false;
    }
    for (i = _i = 0, _ref = arr1.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (arr1[i] !== arr2[i]) {
        return false;
      }
    }
    return true;
  };

  len_point = function(p1, p2) {
    var len;

    len = (p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]);
    return len;
  };

  debug_data = function(data) {
    var row, _i, _len, _results;

    log('debug_data');
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      row = data[_i];
      _results.push(log(row, 'data'));
    }
    return _results;
  };

  random = function(size) {
    var c, directs, inverNum, n, rand, rand_array, rand_move, t2, temp, tmp2, x, y, _i, _j, _k, _l, _m, _n, _o, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results, _results1;

    if (size == null) {
      size = 3;
    }
    log(size);
    rand = function(s, e) {
      return s + parseInt(Math.random() * (e - s + 1));
    };
    rand_array = function(arr) {
      var i, j, t, _i, _ref, _results;

      _results = [];
      for (i = _i = _ref = arr.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        j = rand(0, i);
        t = arr[i];
        arr[i] = arr[j];
        _results.push(arr[j] = t);
      }
      return _results;
    };
    inverNum = function(numArr) {
      var colIndex, count, i, j, len, lineIndex, zeroIndex, _i, _j, _ref, _ref1, _ref2, _ref3;

      len = numArr.length;
      count = 0;
      zeroIndex = numArr.indexOf(0);
      for (i = _i = 0, _ref = len - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = _ref1 = i + 1, _ref2 = len - 1; _ref1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; j = _ref1 <= _ref2 ? ++_j : --_j) {
          if ((numArr[i] > (_ref3 = numArr[j]) && _ref3 > 0)) {
            count++;
          }
        }
      }
      colIndex = zeroIndex % 3;
      lineIndex = (zeroIndex - colIndex) / 3;
      log(lineIndex + colIndex + count);
      return lineIndex + colIndex + count;
    };
    directs = [DIRECT_DOWN, DIRECT_UP, DIRECT_RIGHT, DIRECT_LEFT];
    rand_move = function(arr) {
      var arr2, c, flag2, p0, p2, t, x, y, _ref, _ref1;

      flag2 = {};
      c = 0;
      while (++c < 400) {
        p0 = arr.indexOf(0);
        x = p0 % size;
        y = (p0 - x) / size;
        t = directs[rand(0, 3)];
        if (t === DIRECT_UP && y > 0) {
          y--;
        }
        if (t === DIRECT_DOWN && y < size - 1) {
          y++;
        }
        if (t === DIRECT_LEFT && x > 0) {
          x--;
        }
        if (t === DIRECT_RIGHT && x < size - 1) {
          x++;
        }
        p2 = y * size + x;
        if (p2 === p0) {
          continue;
        }
        arr2 = arr.slice(0);
        _ref = [arr2[p0], arr2[p2]], arr2[p2] = _ref[0], arr2[p0] = _ref[1];
        if (flag2[arr2.join('')]) {
          continue;
        }
        _ref1 = [arr[p0], arr[p2]], arr[p2] = _ref1[0], arr[p0] = _ref1[1];
        flag2[arr.join('')] = 1;
      }
      return arr;
    };
    t2 = (function() {
      _results = [];
      for (var _i = 1, _ref = size * size - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).concat([0]);
    rand_move(t2);
    temp = [];
    for (y = _j = 0, _ref1 = size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
      tmp2 = [];
      for (x = _k = 0, _ref2 = size - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; x = 0 <= _ref2 ? ++_k : --_k) {
        tmp2.push(t2[x + y * size]);
      }
      temp.push(tmp2);
    }
    return temp;
    for (c = _l = 0; _l <= 100; c = ++_l) {
      t2 = (function() {
        _results1 = [];
        for (var _m = 1, _ref3 = size * size - 1; 1 <= _ref3 ? _m <= _ref3 : _m >= _ref3; 1 <= _ref3 ? _m++ : _m--){ _results1.push(_m); }
        return _results1;
      }).apply(this).concat([0]);
      rand_array(t2);
      n = inverNum(t2);
      if (n % 2 === 0) {
        temp = [];
        for (y = _n = 0, _ref4 = size - 1; 0 <= _ref4 ? _n <= _ref4 : _n >= _ref4; y = 0 <= _ref4 ? ++_n : --_n) {
          tmp2 = [];
          for (x = _o = 0, _ref5 = size - 1; 0 <= _ref5 ? _o <= _ref5 : _o >= _ref5; x = 0 <= _ref5 ? ++_o : --_o) {
            tmp2.push(t2[x + y * size]);
          }
          temp.push(tmp2);
        }
        return temp;
        break;
      }
      log(t2, '奇数');
    }
  };

}).call(this);
