// Generated by CoffeeScript 1.6.2
/*
拼图游戏的 广度优先的 穷举算法
3x3的小图很快就完成了

get_path 返回的是数字0的移动方向
up , down 都是相对数字 0
*/


(function() {
  var DIRECT_DOWN, DIRECT_LEFT, DIRECT_RIGHT, DIRECT_UP, debug_data, flag, get_point, get_sub, log, map2arr, ok, queue, random, root, search;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  if (!this['console']) {
    this['console'] = {
      log: function(msg) {
        return msg;
      }
    };
  }

  DIRECT_UP = 'up';

  DIRECT_DOWN = 'down';

  DIRECT_RIGHT = 'right';

  DIRECT_LEFT = 'left';

  flag = {};

  flag['len'] = 0;

  console.log(flag);

  log = function(msg, flag) {
    if (flag == null) {
      flag = '';
    }
    return console.log(flag + JSON.stringify(msg));
  };

  ok = '123456780';

  map2arr = function(arr) {
    var t, y, _i, _len;

    t = [];
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      y = arr[_i];
      t = t.concat(y);
    }
    return t;
  };

  debug_data = function(data) {
    var row, _i, _len, _results;

    log('debug_data');
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      row = data[_i];
      _results.push(log(row, 'data'));
    }
    return _results;
  };

  random = function(size) {
    var directs, inverNum, rand, rand_array, rand_move, t2, temp, tmp2, x, y, _i, _j, _k, _ref, _ref1, _ref2, _results;

    if (size == null) {
      size = 3;
    }
    log(size);
    rand = function(s, e) {
      return s + parseInt(Math.random() * (e - s + 1));
    };
    rand_array = function(arr) {
      var i, j, t, _i, _ref, _results;

      _results = [];
      for (i = _i = _ref = arr.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        j = rand(0, i);
        t = arr[i];
        arr[i] = arr[j];
        _results.push(arr[j] = t);
      }
      return _results;
    };
    inverNum = function(numArr) {
      var colIndex, count, i, j, len, lineIndex, zeroIndex, _i, _j, _ref, _ref1, _ref2, _ref3;

      len = numArr.length;
      count = 0;
      zeroIndex = numArr.indexOf(0);
      for (i = _i = 0, _ref = len - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = _ref1 = i + 1, _ref2 = len - 1; _ref1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; j = _ref1 <= _ref2 ? ++_j : --_j) {
          if ((numArr[i] > (_ref3 = numArr[j]) && _ref3 > 0)) {
            count++;
          }
        }
      }
      colIndex = zeroIndex % 3;
      lineIndex = (zeroIndex - colIndex) / 3;
      log(lineIndex + colIndex + count);
      return lineIndex + colIndex + count;
    };
    directs = [DIRECT_DOWN, DIRECT_UP, DIRECT_RIGHT, DIRECT_LEFT];
    rand_move = function(arr) {
      var arr2, c, flag2, p0, p2, t, x, y, _ref, _ref1;

      flag2 = {};
      c = 0;
      while (++c < 400) {
        p0 = arr.indexOf(0);
        x = p0 % size;
        y = (p0 - x) / size;
        t = directs[rand(0, 3)];
        if (t === DIRECT_UP && y > 0) {
          y--;
        }
        if (t === DIRECT_DOWN && y < size - 1) {
          y++;
        }
        if (t === DIRECT_LEFT && x > 0) {
          x--;
        }
        if (t === DIRECT_RIGHT && x < size - 1) {
          x++;
        }
        p2 = y * size + x;
        if (p2 === p0) {
          continue;
        }
        arr2 = arr.slice(0);
        _ref = [arr2[p0], arr2[p2]], arr2[p2] = _ref[0], arr2[p0] = _ref[1];
        if (flag2[arr2.join('')]) {
          continue;
        }
        _ref1 = [arr[p0], arr[p2]], arr[p2] = _ref1[0], arr[p0] = _ref1[1];
        flag2[arr.join('')] = 1;
      }
      return arr;
    };
    t2 = (function() {
      _results = [];
      for (var _i = 1, _ref = size * size - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).concat([0]);
    rand_move(t2);
    temp = [];
    for (y = _j = 0, _ref1 = size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
      tmp2 = [];
      for (x = _k = 0, _ref2 = size - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; x = 0 <= _ref2 ? ++_k : --_k) {
        tmp2.push(t2[x + y * size]);
      }
      temp.push(tmp2);
    }
    return temp;
  };

  queue = [];

  search = function(data, p0) {
    var n, node, node2, sub, _i, _j, _len, _len1;

    log(data, 'search');
    if (flag[data[0]]) {
      return;
    }
    if (data[0].join('') === ok) {
      return node;
    }
    sub = get_sub(data);
    for (_i = 0, _len = sub.length; _i < _len; _i++) {
      node = sub[_i];
      queue.push(node);
      flag[node[0].join('')] = 1;
      ++flag['len'];
    }
    while (queue.length) {
      node = queue.splice(0, 1)[0];
      if (node[0].join('') === ok) {
        return node;
      }
      sub = get_sub(node);
      for (_j = 0, _len1 = sub.length; _j < _len1; _j++) {
        node2 = sub[_j];
        n = node2[0].join('');
        if (!flag[n]) {
          queue.push(node2);
          flag[n] = 1;
          ++flag['len'];
        }
      }
    }
  };

  get_sub = function(data) {
    var p, p0, t;

    p0 = data[0].indexOf(0);
    t = [];
    p = get_point(data[0], p0, DIRECT_DOWN);
    if (p) {
      t.push([p, data[1].concat(DIRECT_DOWN)]);
    }
    p = get_point(data[0], p0, DIRECT_UP);
    if (p) {
      t.push([p, data[1].concat(DIRECT_UP)]);
    }
    p = get_point(data[0], p0, DIRECT_RIGHT);
    if (p) {
      t.push([p, data[1].concat(DIRECT_RIGHT)]);
    }
    p = get_point(data[0], p0, DIRECT_LEFT);
    if (p) {
      t.push([p, data[1].concat(DIRECT_LEFT)]);
    }
    return t;
  };

  get_point = function(data, p0, direct) {
    var data2, p2, x, y, _ref;

    x = p0 % 3;
    y = (p0 - x) / 3;
    if (x === 0 && direct === DIRECT_LEFT) {
      return;
    }
    if (x === 2 && direct === DIRECT_RIGHT) {
      return;
    }
    if (y === 0 && direct === DIRECT_UP) {
      return;
    }
    if (y === 2 && direct === DIRECT_DOWN) {
      return;
    }
    data2 = data.slice(0);
    if (direct === DIRECT_LEFT) {
      --x;
    }
    if (direct === DIRECT_RIGHT) {
      ++x;
    }
    if (direct === DIRECT_UP) {
      --y;
    }
    if (direct === DIRECT_DOWN) {
      ++y;
    }
    p2 = y * 3 + x;
    _ref = [data2[p2], data2[p0]], data2[p0] = _ref[0], data2[p2] = _ref[1];
    return data2;
  };

  root.get_path = function(data) {
    var i, line, p0, r, result;

    for (i in flag) {
      delete flag[i];
    }
    queue.length = 0;
    data = line = map2arr(data);
    p0 = data.indexOf(0);
    log(data, 'init');
    queue.push([data, []]);
    result = {};
    r = search([data, []], p0);
    if (r) {
      log(line, 'old');
      log(r, 'ok');
    } else {
      log(line, 'done');
    }
    return r;
  };

  root.addEventListener('message', function(e) {
    var data, r;

    data = e.data;
    r = root.get_path(data);
    console.log(r, 'r');
    return root.postMessage(r);
  }, false);

}).call(this);
